name: CI

on:
  pull_request:
    branches:
      - '**'

permissions:
  contents: read

jobs:
  test:
    name: Tests (ubuntu-latest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Compute ldflags
        shell: bash
        run: |
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "LDFLAGS=-X github.com/jvanrhyn/passgen/internal/version.Version=dev -X github.com/jvanrhyn/passgen/internal/version.Commit=${COMMIT} -X github.com/jvanrhyn/passgen/internal/version.Date=${DATE}" >> $GITHUB_ENV

      - name: Run unit and CLI tests
        run: go test -ldflags "$LDFLAGS" -v ./...

  build-matrix:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build with Go (matrix)
        shell: bash
        run: |
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          export CGO_ENABLED=0
          mkdir -p bin
          OUT=bin/passgen
          if [[ "$GOOS" == "windows" ]]; then OUT=bin/passgen.exe; fi
          # Use dev version for PR builds; embed commit and date
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          LDFLAGS="-X github.com/jvanrhyn/passgen/internal/version.Version=dev -X github.com/jvanrhyn/passgen/internal/version.Commit=${COMMIT} -X github.com/jvanrhyn/passgen/internal/version.Date=${DATE}"
          go build -ldflags "$LDFLAGS" -o "$OUT" ./